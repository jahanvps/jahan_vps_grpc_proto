syntax = "proto3";

package payment;

message TransactionLog {
  string id = 1;
  optional string paymentId = 2;
  optional string transactionType = 3;
  optional string userAgent= 4;
  optional string userId = 5;
  optional string message = 6;
  optional string errorCode = 7;
  optional string errorMessage = 8;
  optional string successMessage = 9;
  optional string paymentMethod = 10;
  optional string paymentGateway = 11;
  optional string metadata = 12;
  optional string description = 13;
  optional string ipAddress = 14;
  string createdAt = 15;
  string updatedAt = 16;
}

message Payment {
  string id = 1;
  string isverify = 2;
  string authority = 3;
  string amount = 4;
  optional string description= 5;
  string invoiceid = 6;
  optional string currency = 7;
  string status = 8;
  optional string paiddatesolar = 9;
  optional string paymentcreateddatesolar = 10;
  string userid = 11;
  string packageid = 12;
  optional string cardhash = 13;
  optional string failurereason = 14;
  optional string successmessage = 15;
  optional string metadata = 16;
  optional string refid = 17;
  optional string feetype = 18;
  optional string zarinpalfee = 19;
  optional string paymentcompletedat = 20;
  repeated TransactionLog transactionlogs = 21;

  string createdat = 22;
  string updatedat = 23;
}


service PaymentService {
  rpc Payment (PaymentRequest) returns (PaymentResponse) {}
  rpc FindAllPayments (SearchQueryRequest) returns (PaginatedPaymentResponse) {}
  rpc FindByUserId (SearchByIdDtoRequest) returns (PaginatedPaymentResponse) {}
  rpc FindByInvoiceId (SearchByInvoiceIdDtoRequest) returns (PaginatedPaymentResponse) {}

//   rpc VerifyPayment (VerifyPaymentRequest) returns (VerifyPaymentResponse) {}
}

message SearchQueryRequest {
  optional int32 page = 1;
  optional int32 limit = 2;
}
message SearchByIdDtoRequest {
  optional int32 page = 1;
  optional int32 limit = 2;
  string userid = 3;
}
message SearchByInvoiceIdDtoRequest {
  optional int32 page = 1;
  optional int32 limit = 2;
  string invoiceid = 3;
}


message PaginationData {
  int32 totalCount = 1;
  int32 page = 2;
  int32 limit = 3;
  int32 pageCount = 4;
}

message ResultData {
repeated Payment payments = 1;
optional PaginationData paginationInfo = 2;
}

message PaginatedPaymentResponse {
  int32 status = 1;
  repeated string error = 2;
  ResultData data = 3;
}

message PaymentRequest {
    string userId = 1;
    string pckgId = 2;
    string description = 3;
    int32 duration = 4;
    string durationType = 5;
}

message PaymentResponse {
    int32 status = 1;
    repeated string errors = 2;
    string paymentUrl = 3;
}
