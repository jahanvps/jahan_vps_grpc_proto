syntax = "proto3";

package payment;

message TransactionLog {
  string id = 1;
  optional string paymentId = 2;
  optional string transactionType = 3;
  optional string userAgent= 4;
  optional string userId = 5;
  optional string message = 6;
  optional string errorCode = 7;
  optional string errorMessage = 8;
  optional string successMessage = 9;
  optional string paymentMethod = 10;
  optional string paymentGateway = 11;
  optional string metadata = 12;
  optional string description = 13;
  optional string ipAddress = 14;
  string createdAt = 15;
  string updatedAt = 16;
}

message Payment {
  string id = 1;
  string isverify = 2;
  string authority = 3;
  string amount = 4;
  optional string description= 5;
  string invoiceid = 6;
  optional string currency = 7;
  string status = 8;
  optional string paiddatesolar = 9;
  optional string paymentcreateddatesolar = 10;
  string userid = 11;
  string packageid = 12;
  optional string cardhash = 13;
  optional string failurereason = 14;
  optional string successmessage = 15;
  optional string metadata = 16;
  optional string refid = 17;
  optional string feetype = 18;
  optional string zarinpalfee = 19;
  optional string paymentcompletedat = 20;
  repeated TransactionLog transactionlogs = 21;

  string createdat = 22;
  string updatedat = 23;
  optional string duration = 24;
  optional string durationType = 25;
}


service PaymentService {
  rpc Payment (PaymentRequest) returns (PaymentResponse) {}
  rpc Verify (VerifyPaymentRequest) returns (EmptyResponse) {}
  rpc FindAllPayments (SearchQueryRequest) returns (PaginatedPaymentResponse) {}
  rpc FindByUserId (SearchByIdDtoRequest) returns (PaginatedPaymentResponse) {}
  rpc FindByInvoiceId (SearchByInvoiceIdDtoRequest) returns (SinglePaymentResponse) {}
  rpc FindByRefId (SearchByRefIdDtoRequest) returns (SinglePaymentResponse) {}
  rpc FindByPackageId(SearchByPackageIdDtoRequest) returns (PaginatedPaymentResponse) {}
  rpc FindByStatus(SearchByStatusRequest) returns (PaginatedPaymentResponse) {}
  rpc FindByAuthority (SearchByAuthoriyRequest) returns (SinglePaymentResponse) {}
  rpc UpdatePaymentStatus(UpdatePaymentStatusRequest) returns (SinglePaymentResponse) {}
  rpc MarkPaymentAsVerified (PaymentIdRequest) returns (SinglePaymentResponse) {}
  rpc GetPaymentsWithTransactionLogs (SearchQueryRequest) returns (PaginatedPaymentResponse) {}
  rpc GetPaymentWithTransactionLogs (PaymentIdRequest) returns (SinglePaymentResponse) {}

  rpc GetTransactionLogsForPayment (PaymentIdRequest) returns (PaginatedTransactionLogResponse) {}
  rpc GetTransactionLogsForUser (UserIdRequest) returns (PaginatedTransactionLogResponse) {}
  rpc GetTransactionLogsByType (GetLogsByTypeRequest) returns (PaginatedTransactionLogResponse) {}
}

message EmptyResponse {}

message GetLogsByTypeRequest {
  string transactionType = 1;
}

message FindPaymentsBetweenTwoDatesRequest {
  string startDate = 1;
  string endDate = 2;
}

message PaymentIdRequest {
  string paymentId = 1;
}

message UserIdRequest {
  string userId = 1;
}

message SinglePaymentResponse {
  int32 status = 1;
  repeated string error = 2;
  Payment payment = 3;
}

message SearchQueryRequest {
  optional int32 page = 1;
  optional int32 limit = 2;
  optional string search = 3;
}

message SearchByIdDtoRequest {
  optional int32 page = 1;
  optional int32 limit = 2;
  string userid = 3;
  optional string search = 4;
}

message SearchByStatusRequest {
  optional int32 page = 1;
  optional int32 limit = 2;
  string status = 3;
  optional string search = 4;
}

message SearchByAuthoriyRequest {
  string authority = 1;
}

message UpdatePaymentStatusRequest {
  string paymentId = 1;
  string newStatus = 2;
}

message SearchByPackageIdDtoRequest {
  optional int32 page = 1;
  optional int32 limit = 2;
  string pakageId = 3;
  optional string search = 4;
}

message SearchByInvoiceIdDtoRequest {
  string invoiceid = 1;
}

message SearchByRefIdDtoRequest {
  string refId = 1;
}

message PaginationData {
  int32 totalCount = 1;
  int32 page = 2;
  int32 limit = 3;
  int32 pageCount = 4;
}

message ResultData {
repeated Payment payments = 1;
optional PaginationData paginationInfo = 2;
}

message TransactionLogResultData {
repeated TransactionLog transactionLogs = 1;
optional PaginationData paginationInfo = 2;
}

message PaginatedPaymentResponse {
  int32 status = 1;
  repeated string error = 2;
  ResultData data = 3;
}
message PaginatedTransactionLogResponse {
  int32 status = 1;
  repeated string error = 2;
  TransactionLogResultData data = 3;
}

message VerifyPaymentRequest {
    string Authority = 1;
    string Status = 2;
}

message PaymentRequest {
    string userId = 1;
    string pckgId = 2;
    string description = 3;
    int32 duration = 4;
    string durationType = 5;
}

message PaymentResponse {
    int32 status = 1;
    repeated string errors = 2;
    string paymentUrl = 3;
}
